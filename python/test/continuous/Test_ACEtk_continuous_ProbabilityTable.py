# standard imports
import unittest

# third party imports

# local imports
from ACEtk.continuous import ProbabilityTable

class Test_ACEtk_continuous_ProbabilityTable( unittest.TestCase ) :
    """Unit test for the ProbabilityTable class."""

    chunk = [                       2.97187500000E-03,   5.33593800000E-03,   1.41937500000E-02,
               4.30500000000E-02,   1.15618800000E-01,   2.73403200000E-01,   4.29101600000E-01,
               5.67407900000E-01,   6.83036000000E-01,   7.97178200000E-01,   9.04947000000E-01,
               9.64268800000E-01,   9.85792300000E-01,   9.95418800000E-01,   9.98034500000E-01,
               1.00000000000E+00,   6.20303500000E-01,   6.42335400000E-01,   6.60452300000E-01,
               6.90002000000E-01,   7.33742600000E-01,   7.99614200000E-01,   8.76401300000E-01,
               9.51171000000E-01,   1.02867900000E+00,   1.12121100000E+00,   1.24689400000E+00,
               1.40225100000E+00,   1.55842900000E+00,   1.71112000000E+00,   1.86097600000E+00,
               2.08166900000E+00,   8.88269000000E-01,   9.12816500000E-01,   9.23308400000E-01,
               9.37411100000E-01,   9.49310700000E-01,   9.61475400000E-01,   9.73965600000E-01,
               9.85856900000E-01,   9.99825000000E-01,   1.01810900000E+00,   1.05061900000E+00,
               1.09372600000E+00,   1.13727700000E+00,   1.17577200000E+00,   1.21880600000E+00,
               1.25902700000E+00,   2.06017200000E-01,   2.23310300000E-01,   2.54194800000E-01,
               3.08081500000E-01,   4.02651200000E-01,   5.53739000000E-01,   7.31365600000E-01,
               9.03602600000E-01,   1.07779300000E+00,   1.28805300000E+00,   1.55582400000E+00,
               1.84830500000E+00,   2.13848200000E+00,   2.46773600000E+00,   2.73598100000E+00,
               3.24694300000E+00,   1.79948200000E-01,   2.00216700000E-01,   2.28134200000E-01,
               2.81797100000E-01,   3.73393600000E-01,   5.21435100000E-01,   6.99884000000E-01,
               8.77272600000E-01,   1.06353100000E+00,   1.26987600000E+00,   1.55414500000E+00,
               1.99555900000E+00,   2.44876200000E+00,   2.78909800000E+00,   3.24494800000E+00,
               3.73081700000E+00,   1.00000000000E+00,   1.00000000000E+00,   1.00000000000E+00,
               1.00000000000E+00,   1.00000000000E+00,   1.00000000000E+00,   1.00000000000E+00,
               1.00000000000E+00,   1.00000000000E+00,   1.00000000000E+00,   1.00000000000E+00,
               1.00000000000E+00,   1.00000000000E+00,   1.00000000000E+00,   1.00000000000E+00,
               1.00000000000E+00 ]

    def test_component( self ) :

        def verify_chunk( self, chunk ) :

            # verify content
            self.assertEqual( False, chunk.empty )
            self.assertEqual( 96, chunk.length )
            self.assertEqual( "ProbabilityTable", chunk.name )

            self.assertEqual( 96, len( chunk.xss_array ) )

            self.assertEqual( 16, chunk.number_bins )
            self.assertEqual( 16, len( chunk.cumulative_probabilities ) )
            self.assertEqual( 16, len( chunk.total ) )
            self.assertEqual( 16, len( chunk.elastic ) )
            self.assertEqual( 16, len( chunk.fission ) )
            self.assertEqual( 16, len( chunk.capture ) )
            self.assertEqual( 16, len( chunk.heating ) )

            self.assertAlmostEqual( 2.97187500000E-03, chunk.cumulative_probabilities[0] )
            self.assertAlmostEqual( 1., chunk.cumulative_probabilities[-1] )
            self.assertAlmostEqual( 6.20303500000E-01, chunk.total[0] )
            self.assertAlmostEqual( 2.08166900000E+00, chunk.total[-1] )
            self.assertAlmostEqual( 8.88269000000E-01, chunk.elastic[0] )
            self.assertAlmostEqual( 1.25902700000E+00, chunk.elastic[-1] )
            self.assertAlmostEqual( 2.06017200000E-01, chunk.fission[0] )
            self.assertAlmostEqual( 3.24694300000E+00, chunk.fission[-1] )
            self.assertAlmostEqual( 1.79948200000E-01, chunk.capture[0] )
            self.assertAlmostEqual( 3.73081700000E+00, chunk.capture[-1] )
            self.assertAlmostEqual( 1., chunk.heating[0] )
            self.assertAlmostEqual( 1., chunk.heating[-1] )

            # verify the xss array
            xss = chunk.xss_array
            for index in range( chunk.length ) :

                self.assertAlmostEqual( self.chunk[index], xss[index] )

        # the data is given explicitly
        chunk = ProbabilityTable(
          incident = 2.250001e-3,
          probabilities = [
                                 2.97187500000E-03,   5.33593800000E-03,   1.41937500000E-02,
            4.30500000000E-02,   1.15618800000E-01,   2.73403200000E-01,   4.29101600000E-01,
            5.67407900000E-01,   6.83036000000E-01,   7.97178200000E-01,   9.04947000000E-01,
            9.64268800000E-01,   9.85792300000E-01,   9.95418800000E-01,   9.98034500000E-01,
            1.00000000000E+00 ],
          total = [

                                 6.20303500000E-01,   6.42335400000E-01,   6.60452300000E-01,
            6.90002000000E-01,   7.33742600000E-01,   7.99614200000E-01,   8.76401300000E-01,
            9.51171000000E-01,   1.02867900000E+00,   1.12121100000E+00,   1.24689400000E+00,
            1.40225100000E+00,   1.55842900000E+00,   1.71112000000E+00,   1.86097600000E+00,
            2.08166900000E+00 ],
          elastic = [

                                 8.88269000000E-01,   9.12816500000E-01,   9.23308400000E-01,
            9.37411100000E-01,   9.49310700000E-01,   9.61475400000E-01,   9.73965600000E-01,
            9.85856900000E-01,   9.99825000000E-01,   1.01810900000E+00,   1.05061900000E+00,
            1.09372600000E+00,   1.13727700000E+00,   1.17577200000E+00,   1.21880600000E+00,
            1.25902700000E+00 ],
          fission = [

                                 2.06017200000E-01,   2.23310300000E-01,   2.54194800000E-01,
            3.08081500000E-01,   4.02651200000E-01,   5.53739000000E-01,   7.31365600000E-01,
            9.03602600000E-01,   1.07779300000E+00,   1.28805300000E+00,   1.55582400000E+00,
            1.84830500000E+00,   2.13848200000E+00,   2.46773600000E+00,   2.73598100000E+00,
            3.24694300000E+00 ],
          capture = [

                                 1.79948200000E-01,   2.00216700000E-01,   2.28134200000E-01,
            2.81797100000E-01,   3.73393600000E-01,   5.21435100000E-01,   6.99884000000E-01,
            8.77272600000E-01,   1.06353100000E+00,   1.26987600000E+00,   1.55414500000E+00,
            1.99555900000E+00,   2.44876200000E+00,   2.78909800000E+00,   3.24494800000E+00,
            3.73081700000E+00 ],
          heating = [

                                 1.00000000000E+00,   1.00000000000E+00,   1.00000000000E+00,
            1.00000000000E+00,   1.00000000000E+00,   1.00000000000E+00,   1.00000000000E+00,
            1.00000000000E+00,   1.00000000000E+00,   1.00000000000E+00,   1.00000000000E+00,
            1.00000000000E+00,   1.00000000000E+00,   1.00000000000E+00,   1.00000000000E+00,
            1.00000000000E+00 ] )

        verify_chunk( self, chunk )

if __name__ == '__main__' :

    unittest.main()
