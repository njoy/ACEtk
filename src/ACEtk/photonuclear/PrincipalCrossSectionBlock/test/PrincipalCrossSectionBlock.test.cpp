// include Catch2
#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_floating_point.hpp>
using Catch::Matchers::WithinRel;

// what we are testing
#include "ACEtk/photonuclear/PrincipalCrossSectionBlock.hpp"

// other includes

// convenience typedefs
using namespace njoy::ACEtk;
using PrincipalCrossSectionBlock = photonuclear::PrincipalCrossSectionBlock;

std::vector< double > chunk();
void verifyChunk( const PrincipalCrossSectionBlock& );

SCENARIO( "PrincipalCrossSectionBlock" ) {

  GIVEN( "valid data for a PrincipalCrossSectionBlock instance" ) {

    std::vector< double > xss = chunk();

    WHEN( "the data is given explicitly" ) {

      std::vector< double > energies = {

        1.00000000000E+00,   1.50000000000E+00,   2.00000000000E+00,   2.50000000000E+00,
        3.00000000000E+00,   3.50000000000E+00,   4.00000000000E+00,   4.50000000000E+00,
        5.00000000000E+00,   5.25000000000E+00,   5.50000000000E+00,   5.75000000000E+00,
        6.00000000000E+00,   6.50000000000E+00,   7.00000000000E+00,   7.50000000000E+00,
        8.00000000000E+00,   8.50000000000E+00,   9.00000000000E+00,   9.50000000000E+00,
        1.00000000000E+01,   1.05000000000E+01,   1.10000000000E+01,   1.15000000000E+01,
        1.20000000000E+01,   1.25000000000E+01,   1.30000000000E+01,   1.35000000000E+01,
        1.40000000000E+01,   1.45000000000E+01,   1.50000000000E+01,   1.55000000000E+01,
        1.60000000000E+01,   1.65000000000E+01,   1.70000000000E+01,   1.75000000000E+01,
        1.80000000000E+01,   1.85000000000E+01,   1.90000000000E+01,   1.95000000000E+01,
        2.00000000000E+01,   2.10000000000E+01,   2.20000000000E+01,   2.30000000000E+01,
        2.40000000000E+01,   2.50000000000E+01,   2.60000000000E+01,   2.70000000000E+01,
        2.80000000000E+01,   2.90000000000E+01,   3.00000000000E+01,   3.20000000000E+01,
        3.40000000000E+01,   3.60000000000E+01,   3.80000000000E+01,   4.00000000000E+01,
        4.20000000000E+01,   4.40000000000E+01,   4.60000000000E+01,   4.80000000000E+01,
        5.00000000000E+01,   5.20000000000E+01,   5.40000000000E+01,   5.60000000000E+01,
        5.80000000000E+01,   6.00000000000E+01,   6.20000000000E+01,   6.40000000000E+01,
        6.60000000000E+01,   6.80000000000E+01,   7.00000000000E+01,   7.20000000000E+01,
        7.40000000000E+01,   7.60000000000E+01,   7.80000000000E+01,   8.00000000000E+01,
        8.50000000000E+01,   9.00000000000E+01,   9.50000000000E+01,   1.00000000000E+02,
        1.10000000000E+02,   1.20000000000E+02,   1.30000000000E+02,   1.40000000000E+02,
        1.50000000000E+02,   1.60000000000E+02,   1.70000000000E+02,   1.80000000000E+02,
        1.90000000000E+02,   2.00000000000E+02
      };
      std::vector< double > total = {

                                                  0.00000000000E+00,   1.73990300000E-04,
        3.80628100000E-04,   7.19447600000E-04,   1.24065100000E-03,   2.01138400028E-03,
        3.12210213246E-03,   4.69192380934E-03,   6.86535572000E-03,   8.22493510000E-03,
        9.78770400000E-03,   1.15664100000E-02,   1.35746700000E-02,   1.83911300000E-02,
        2.47224900000E-02,   3.35973900000E-02,   4.66516000000E-02,   6.63654900000E-02,
        9.66257900000E-02,   1.43383400000E-01,   2.14479300000E-01,   3.14521100000E-01,
        4.24739500000E-01,   4.89058400000E-01,   4.81210000000E-01,   4.47735000000E-01,
        4.33025300000E-01,   4.44132100000E-01,   4.60994800000E-01,   4.54428200000E-01,
        4.14176400000E-01,   3.55398400000E-01,   2.96564100000E-01,   2.46479000000E-01,
        2.06552500000E-01,   1.75355200000E-01,   1.50955500000E-01,   1.31679600000E-01,
        1.16245100000E-01,   1.03709100000E-01,   9.33854200000E-02,   7.71289200000E-02,
        6.52662600000E-02,   5.62918300000E-02,   4.93056300000E-02,   4.37438400000E-02,
        3.92380800000E-02,   3.55385300000E-02,   3.24699500000E-02,   2.99055900000E-02,
        2.77511600000E-02,   2.43999500000E-02,   2.20048100000E-02,   2.02967600000E-02,
        1.90895800000E-02,   1.82493800000E-02,   1.76777300000E-02,   1.73013900000E-02,
        1.70655600000E-02,   1.69291800000E-02,   1.68614700000E-02,   1.68394300000E-02,
        1.68459100000E-02,   1.68681600000E-02,   1.68967700000E-02,   1.69248500000E-02,
        1.69474400000E-02,   1.69609800000E-02,   1.69630400000E-02,   1.69520200000E-02,
        1.69269300000E-02,   1.68872800000E-02,   1.68329300000E-02,   1.67640300000E-02,
        1.66809300000E-02,   1.65841400000E-02,   1.62865400000E-02,   1.59191200000E-02,
        1.54950700000E-02,   1.50280100000E-02,   1.40185100000E-02,   1.29933600000E-02,
        1.20464900000E-02,   1.12630400000E-02,   1.02874700000E-02,   9.44447800000E-03,
        8.71022200000E-03,   8.06608600000E-03,   7.49735300000E-03,   6.99225100000E-03
      };
      std::vector< double > heating = {

        0.00000000000E+00,   2.01035600000E-01,   2.18073600000E-01,   2.81893300000E-01,
        3.05144200000E-01,   2.63477200000E-01,   1.52302800000E-01,   1.59786300000E-01,
        9.19800700000E-01,   1.27957100000E+01,   1.05586900000E+02,   1.40550500000E+02,
        1.36964500000E+02,   1.55297500000E+02,   1.49260800000E+02,   1.54658200000E+02,
        1.57366000000E+02,   1.56322500000E+02,   1.52589700000E+02,   1.47181600000E+02,
        1.40898000000E+02,   1.34172200000E+02,   1.26644400000E+02,   1.17691600000E+02,
        1.19073300000E+02,   1.30331500000E+02,   1.46006600000E+02,   1.58524900000E+02,
        1.58953500000E+02,   1.53348800000E+02,   1.47154900000E+02,   1.42092200000E+02,
        1.37644500000E+02,   1.33775400000E+02,   1.30951100000E+02,   1.28042000000E+02,
        1.28426300000E+02,   1.34387300000E+02,   1.44782600000E+02,   1.56780200000E+02,
        1.66785900000E+02,   1.77022900000E+02,   1.77372900000E+02,   1.72651600000E+02,
        1.70867100000E+02,   1.74711200000E+02,   1.79876000000E+02,   1.86133300000E+02,
        1.90937300000E+02,   1.93696800000E+02,   1.96023900000E+02,   1.96963300000E+02,
        1.98737900000E+02,   1.99495000000E+02,   2.00649100000E+02,   2.01939200000E+02,
        2.03100900000E+02,   2.04334500000E+02,   2.05836800000E+02,   2.07437400000E+02,
        2.09182400000E+02,   2.10620200000E+02,   2.12237100000E+02,   2.13911400000E+02,
        2.15707900000E+02,   2.17329800000E+02,   2.19260700000E+02,   2.20972100000E+02,
        2.22665400000E+02,   2.24514500000E+02,   2.26035300000E+02,   2.27634000000E+02,
        2.29673300000E+02,   2.31150000000E+02,   2.32677200000E+02,   2.34671000000E+02,
        2.38395600000E+02,   2.42582400000E+02,   2.46545600000E+02,   2.50334800000E+02,
        2.58043800000E+02,   2.65084400000E+02,   2.72293500000E+02,   2.78791100000E+02,
        2.84998200000E+02,   2.90682600000E+02,   2.96026100000E+02,   3.00769800000E+02,
        3.05302600000E+02,   3.09883800000E+02
      };

      PrincipalCrossSectionBlock chunk( std::move( energies ),
                                                    std::move( total ),
                                                    std::move( heating ) );

      THEN( "a PrincipalCrossSectionBlock can be constructed and members can "
            "be tested" ) {

        verifyChunk( chunk );
      } // THEN

      THEN( "the XSS array is correct" ) {

        auto xss_chunk = chunk.XSS();
        for ( unsigned int i = 0; i < chunk.length(); ++i ) {

          CHECK_THAT( xss[i], WithinRel( xss_chunk[i] ) );
        }
      } // THEN
    } // WHEN

    WHEN( "the data is defined by iterators" ) {

      PrincipalCrossSectionBlock chunk( xss.begin(), xss.end(), 90, 3 );

      THEN( "a PrincipalCrossSectionBlock can be constructed and members can "
            "be tested" ) {

        verifyChunk( chunk );
      } // THEN

      THEN( "the XSS array is correct" ) {

        auto xss_chunk = chunk.XSS();
        for ( unsigned int i = 0; i < chunk.length(); ++i ) {

          CHECK_THAT( xss[i], WithinRel( xss_chunk[i] ) );
        }
      } // THEN
    } // WHEN
  } // GIVEN
} // SCENARIO

std::vector< double > chunk() {

  return {

    1.00000000000E+00,   1.50000000000E+00,   2.00000000000E+00,   2.50000000000E+00,
    3.00000000000E+00,   3.50000000000E+00,   4.00000000000E+00,   4.50000000000E+00,
    5.00000000000E+00,   5.25000000000E+00,   5.50000000000E+00,   5.75000000000E+00,
    6.00000000000E+00,   6.50000000000E+00,   7.00000000000E+00,   7.50000000000E+00,
    8.00000000000E+00,   8.50000000000E+00,   9.00000000000E+00,   9.50000000000E+00,
    1.00000000000E+01,   1.05000000000E+01,   1.10000000000E+01,   1.15000000000E+01,
    1.20000000000E+01,   1.25000000000E+01,   1.30000000000E+01,   1.35000000000E+01,
    1.40000000000E+01,   1.45000000000E+01,   1.50000000000E+01,   1.55000000000E+01,
    1.60000000000E+01,   1.65000000000E+01,   1.70000000000E+01,   1.75000000000E+01,
    1.80000000000E+01,   1.85000000000E+01,   1.90000000000E+01,   1.95000000000E+01,
    2.00000000000E+01,   2.10000000000E+01,   2.20000000000E+01,   2.30000000000E+01,
    2.40000000000E+01,   2.50000000000E+01,   2.60000000000E+01,   2.70000000000E+01,
    2.80000000000E+01,   2.90000000000E+01,   3.00000000000E+01,   3.20000000000E+01,
    3.40000000000E+01,   3.60000000000E+01,   3.80000000000E+01,   4.00000000000E+01,
    4.20000000000E+01,   4.40000000000E+01,   4.60000000000E+01,   4.80000000000E+01,
    5.00000000000E+01,   5.20000000000E+01,   5.40000000000E+01,   5.60000000000E+01,
    5.80000000000E+01,   6.00000000000E+01,   6.20000000000E+01,   6.40000000000E+01,
    6.60000000000E+01,   6.80000000000E+01,   7.00000000000E+01,   7.20000000000E+01,
    7.40000000000E+01,   7.60000000000E+01,   7.80000000000E+01,   8.00000000000E+01,
    8.50000000000E+01,   9.00000000000E+01,   9.50000000000E+01,   1.00000000000E+02,
    1.10000000000E+02,   1.20000000000E+02,   1.30000000000E+02,   1.40000000000E+02,
    1.50000000000E+02,   1.60000000000E+02,   1.70000000000E+02,   1.80000000000E+02,
    1.90000000000E+02,   2.00000000000E+02,   0.00000000000E+00,   1.73990300000E-04,
    3.80628100000E-04,   7.19447600000E-04,   1.24065100000E-03,   2.01138400028E-03,
    3.12210213246E-03,   4.69192380934E-03,   6.86535572000E-03,   8.22493510000E-03,
    9.78770400000E-03,   1.15664100000E-02,   1.35746700000E-02,   1.83911300000E-02,
    2.47224900000E-02,   3.35973900000E-02,   4.66516000000E-02,   6.63654900000E-02,
    9.66257900000E-02,   1.43383400000E-01,   2.14479300000E-01,   3.14521100000E-01,
    4.24739500000E-01,   4.89058400000E-01,   4.81210000000E-01,   4.47735000000E-01,
    4.33025300000E-01,   4.44132100000E-01,   4.60994800000E-01,   4.54428200000E-01,
    4.14176400000E-01,   3.55398400000E-01,   2.96564100000E-01,   2.46479000000E-01,
    2.06552500000E-01,   1.75355200000E-01,   1.50955500000E-01,   1.31679600000E-01,
    1.16245100000E-01,   1.03709100000E-01,   9.33854200000E-02,   7.71289200000E-02,
    6.52662600000E-02,   5.62918300000E-02,   4.93056300000E-02,   4.37438400000E-02,
    3.92380800000E-02,   3.55385300000E-02,   3.24699500000E-02,   2.99055900000E-02,
    2.77511600000E-02,   2.43999500000E-02,   2.20048100000E-02,   2.02967600000E-02,
    1.90895800000E-02,   1.82493800000E-02,   1.76777300000E-02,   1.73013900000E-02,
    1.70655600000E-02,   1.69291800000E-02,   1.68614700000E-02,   1.68394300000E-02,
    1.68459100000E-02,   1.68681600000E-02,   1.68967700000E-02,   1.69248500000E-02,
    1.69474400000E-02,   1.69609800000E-02,   1.69630400000E-02,   1.69520200000E-02,
    1.69269300000E-02,   1.68872800000E-02,   1.68329300000E-02,   1.67640300000E-02,
    1.66809300000E-02,   1.65841400000E-02,   1.62865400000E-02,   1.59191200000E-02,
    1.54950700000E-02,   1.50280100000E-02,   1.40185100000E-02,   1.29933600000E-02,
    1.20464900000E-02,   1.12630400000E-02,   1.02874700000E-02,   9.44447800000E-03,
    8.71022200000E-03,   8.06608600000E-03,   7.49735300000E-03,   6.99225100000E-03,
    0.00000000000E+00,   2.01035600000E-01,   2.18073600000E-01,   2.81893300000E-01,
    3.05144200000E-01,   2.63477200000E-01,   1.52302800000E-01,   1.59786300000E-01,
    9.19800700000E-01,   1.27957100000E+01,   1.05586900000E+02,   1.40550500000E+02,
    1.36964500000E+02,   1.55297500000E+02,   1.49260800000E+02,   1.54658200000E+02,
    1.57366000000E+02,   1.56322500000E+02,   1.52589700000E+02,   1.47181600000E+02,
    1.40898000000E+02,   1.34172200000E+02,   1.26644400000E+02,   1.17691600000E+02,
    1.19073300000E+02,   1.30331500000E+02,   1.46006600000E+02,   1.58524900000E+02,
    1.58953500000E+02,   1.53348800000E+02,   1.47154900000E+02,   1.42092200000E+02,
    1.37644500000E+02,   1.33775400000E+02,   1.30951100000E+02,   1.28042000000E+02,
    1.28426300000E+02,   1.34387300000E+02,   1.44782600000E+02,   1.56780200000E+02,
    1.66785900000E+02,   1.77022900000E+02,   1.77372900000E+02,   1.72651600000E+02,
    1.70867100000E+02,   1.74711200000E+02,   1.79876000000E+02,   1.86133300000E+02,
    1.90937300000E+02,   1.93696800000E+02,   1.96023900000E+02,   1.96963300000E+02,
    1.98737900000E+02,   1.99495000000E+02,   2.00649100000E+02,   2.01939200000E+02,
    2.03100900000E+02,   2.04334500000E+02,   2.05836800000E+02,   2.07437400000E+02,
    2.09182400000E+02,   2.10620200000E+02,   2.12237100000E+02,   2.13911400000E+02,
    2.15707900000E+02,   2.17329800000E+02,   2.19260700000E+02,   2.20972100000E+02,
    2.22665400000E+02,   2.24514500000E+02,   2.26035300000E+02,   2.27634000000E+02,
    2.29673300000E+02,   2.31150000000E+02,   2.32677200000E+02,   2.34671000000E+02,
    2.38395600000E+02,   2.42582400000E+02,   2.46545600000E+02,   2.50334800000E+02,
    2.58043800000E+02,   2.65084400000E+02,   2.72293500000E+02,   2.78791100000E+02,
    2.84998200000E+02,   2.90682600000E+02,   2.96026100000E+02,   3.00769800000E+02,
    3.05302600000E+02,   3.09883800000E+02
  };
}

void verifyChunk( const PrincipalCrossSectionBlock& chunk ) {

  CHECK( false == chunk.empty() );
  CHECK( 270 == chunk.length() );
  CHECK( "ESZU" == chunk.name() );

  CHECK( 270 == chunk.XSS().size() );

  CHECK( 90 == chunk.NES() );
  CHECK( 90 == chunk.numberEnergyPoints() );
  CHECK( 90 == chunk.energies().size() );
  CHECK( 90 == chunk.total().size() );
  CHECK( 90 == chunk.heating().size() );
  CHECK( 0 == chunk.elastic().size() );

  CHECK_THAT( 1., WithinRel( chunk.energies().front() ) );
  CHECK_THAT( 200., WithinRel( chunk.energies().back() ) );
  CHECK_THAT( 0., WithinRel( chunk.total().front() ) );
  CHECK_THAT( 6.99225100000E-03, WithinRel( chunk.total().back() ) );
  CHECK_THAT( 0., WithinRel( chunk.heating().front() ) );
  CHECK_THAT( 309.8838, WithinRel( chunk.heating().back() ) );
}
